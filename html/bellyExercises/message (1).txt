using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace WpfCircles.Geometry
{
    public class Circle
    {
        private Ellipse _ellipse;
        private double _x;
        private double _y;
        private double _radius;
        private SolidColorBrush _frameColor;
        private SolidColorBrush _fillColor;
        private bool _directionXleft;
        private bool _directionYdown;
        

        public Circle(double x, double y, double radius, SolidColorBrush frameColor, SolidColorBrush fillColor,bool directionXleft, bool directionYdown)
        {
            X = x;
            Y = y;
            Radius = radius;
            DirectionXleft = directionXleft;
            DirectionYdown = directionYdown;
            FrameColor = frameColor;
            FillColor = fillColor;
        }



        public double Circumference
        {
            get
            {
                return 2 * Radius * Math.PI;
            }
        }

        public double X
        {
            get
            {
                return _x;
            }
            set
            {

                _x = value;

                if (_ellipse != null )
                {
                    Canvas.SetRight(_ellipse, _x);
                }

            }
        }
        public double Y 
        {
            get 
            {
                return _y;
            }
            set 
            {
                _y = value;

                if (_ellipse != null)
                {
                    Canvas.SetTop(_ellipse, _y);
                }
            }
        }

        public double Radius
        {
            get
            {
                return _radius;
            }
            set
            {
                if (value < 0)
                {
                    _radius = 0;
                }
                else
                {
                    _radius = value;
                }
            }
        }

        public double Area
        {
            get
            {
                return Radius * Radius * Math.PI;
            }

        }

        public bool DirectionXleft { get => _directionXleft; set => _directionXleft = value; }
        public bool DirectionYdown { get => _directionYdown; set => _directionYdown = value; }
        public SolidColorBrush FrameColor { get => _frameColor; set => _frameColor = value; }
        public SolidColorBrush FillColor { get => _fillColor; set => _fillColor = value; }

        public void DrawOnCanvas(Canvas canvas)
        {
            _ellipse = new Ellipse();
            canvas.Children.Add(_ellipse);
            _ellipse.Width = Radius * 2;
            _ellipse.Height = Radius * 2;
            _ellipse.Stroke = FrameColor;
            _ellipse.Fill = FillColor;
            
            _ellipse.StrokeThickness = 5;
           
            Canvas.SetRight(_ellipse, X);
            Canvas.SetTop(_ellipse, Y);
        }

        public double getDistanceMiddle(Circle circle)
        {
            return Math.Sqrt((Math.Pow(this.X - circle.X, 2) + Math.Pow(this.Y - circle.Y, 2)));
        }

        public double GetGapTo(Circle circle)
        {
            double distanceMiddle = this.getDistanceMiddle(circle);

            if (distanceMiddle > (this.Radius + circle.Radius))
            { // Kreise schneiden sich nicht
                return distanceMiddle - this.Radius - circle.Radius;
            }
            if (distanceMiddle < Math.Abs(this.Radius - circle.Radius))
            { // Ein Kreis liegt im anderen
                return Math.Abs(this.Radius - circle.Radius) - distanceMiddle;
            }

            return 0.0;
        }


        public bool IsOverlappingWith(Circle otherCircle)
        {
            if (this.getDistanceMiddle(otherCircle) <= (this.Radius + otherCircle.Radius))
            {
                return true;
            }
            return false;
        }
    }
}

    
